%PDF-1.3
%ºß¬à
3 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 3449
>>
stream
0.5670000000000001 w
0 G
BT
/F1 18 Tf
20.6999999999999993 TL
0 g
113.3858267716535551 813.5435433070865656 Td
(AI Powered Code-Review and Testing) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
28.3464566929133888 779.5277952755905062 Td
(Language: python) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0 g
28.3464566929133888 731.3388188976377933 Td
(Your Code:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 697.3230708661417339 Td
(def is_prime\(n\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 677.480551181102328 Td
(    if n < 2:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 657.6380314960629221 Td
(        return False) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 637.7955118110235162 Td
(    for i in range\(2, n\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 617.952992125984224 Td
(        if n % i == 0:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 598.1104724409448181 Td
(            return False) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 578.2679527559055259 Td
(    return True) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 538.5829133858267141 Td
(def prime_numbers_up_to_n\(n\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 518.7403937007873083 Td
(    primes = []) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 498.8978740157479592 Td
(    for i in range\(1, n+1\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 479.0553543307086102 Td
(        if is_prime\(i\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 459.2128346456692611 Td
(            primes.append\(i\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 439.3703149606298552 Td
(    return primes) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 399.6852755905511003 Td
(# Run function) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 379.8427559055117513 Td
(print\(prime_numbers_up_to_n\(50\)\)) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0 g
28.3464566929133888 311.8112598425195756 Td
(Code Review:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 277.7955118110235162 Td
(The code is correct but it is not fully optimized and does not follow all the best practices. Here are some potential) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 257.952992125984224 Td
(improvements:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 218.2679527559054122 Td
(1. **Efficiency**: In the `is_prime\(n\)` function, you are checking all the numbers up to `n` to see whether they are) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 198.4254330708660063 Td
(factors of `n`. This is unnecessary. It is enough to check up to `sqrt\(n\)` because a larger factor of `n` would be a) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 178.5829133858267141 Td
(multiple of smaller factor that has already been checked.) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 138.8978740157479024 Td
(2. **Naming convention**: Function names are good but it could be better if they are more representative of what) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 119.0553543307086102 Td
(they do. So, `prime_numbers_up_to_n\(n\)` could be renamed to `find_primes\(n\)` to clearly represent its purpose.) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 79.3703149606297984 Td
(3. **Usage of list comprehensions** over traditional loops where possible is a more pythonic way of doing things) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 59.5277952755905062 Td
(and also faster.) Tj
ET
endstream
endobj
5 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 6 0 R
>>
endobj
6 0 obj
<<
/Length 3333
>>
stream
0.5670000000000001 w
0 G
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 813.5435433070865656 Td
(Here's an improved version of your code:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 773.8585039370078675 Td
(```python) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 754.0159842519684616 Td
(import math) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 714.3309448818897636 Td
(def is_prime\(n\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 694.4884251968503577 Td
(    if n < 2:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 674.6459055118109518 Td
(        return False) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 654.8033858267716596 Td
(    for i in range\(2, math.isqrt\(n\) + 1\):  # only check up to sqrt\(n\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 634.9608661417322537 Td
(        if n % i == 0:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 615.1183464566928478 Td
(            return False) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 595.2758267716535556 Td
(    return True) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 555.5907874015747439 Td
(def find_primes\(n\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 535.748267716535338 Td
(    return [i for i in range\(1, n + 1\) if is_prime\(i\)]  # list comprehension) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 496.0632283464566399 Td
(# Run function) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 476.2207086614172908 Td
(print\(find_primes\(50\)\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 456.378188976377885 Td
(```) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 416.69314960629913 Td
(This version of the code reduces the unnecessary computations, making it more efficient. Also, it uses list) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 396.850629921259781 Td
(comprehension, which makes the code more concise and pythonic. And `find_primes` now talks clearly about its) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 377.0081102362204319 Td
(purpose.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0 g
28.3464566929133888 328.8191338582676053 Td
(Generated Tests:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 294.8033858267715459 Td
(import unittest) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 274.9608661417322537 Td
(import math) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 235.2758267716534419 Td
(def is_prime\(n\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 215.4333070866141497 Td
(    if n <= 1:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 195.5907874015747439 Td
(        return False) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 175.748267716535338 Td
(    if n == 2:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 155.9057480314959321 Td
(        return True) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 136.0632283464566399 Td
(    if n % 2 == 0:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 116.220708661417234 Td
(        return False) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 76.5356692913385359 Td
(    sqrt_n = int\(math.floor\(math.sqrt\(n\)\)\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 56.69314960629913 Td
(    for i in range\(3, sqrt_n + 1, 2\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 36.8506299212597241 Td
(        if n % i == 0:) Tj
ET
endstream
endobj
7 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 8 0 R
>>
endobj
8 0 obj
<<
/Length 3800
>>
stream
0.5670000000000001 w
0 G
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 813.5435433070865656 Td
(            return False) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 793.7010236220472734 Td
(    return True) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 754.0159842519684616 Td
(def prime_numbers_up_to_n\(n\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 734.1734645669291695 Td
(    primes = []) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 714.3309448818897636 Td
(    for possible_prime in range\(2, n + 1\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 694.4884251968503577 Td
(        if is_prime\(possible_prime\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 674.6459055118109518 Td
(            primes.append\(possible_prime\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 654.8033858267716596 Td
(    return primes) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 615.1183464566928478 Td
(class TestPrimeFunctions\(unittest.TestCase\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 575.4333070866141497 Td
(    def test_is_prime\(self\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 555.5907874015747439 Td
(        self.assertEqual\(is_prime\(2\), True\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 535.748267716535338 Td
(        self.assertEqual\(is_prime\(3\), True\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 515.9057480314959321 Td
(        self.assertEqual\(is_prime\(4\), False\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 496.0632283464566399 Td
(        self.assertEqual\(is_prime\(29\), True\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 476.2207086614172908 Td
(        self.assertRaises\(ValueError, is_prime, -1\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 456.378188976377885 Td
(        ) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 436.5356692913385359 Td
(    def test_prime_numbers_up_to_n\(self\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 416.69314960629913 Td
(        self.assertEqual\(prime_numbers_up_to_n\(10\), [2, 3, 5, 7]\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 396.850629921259781 Td
(        self.assertEqual\(prime_numbers_up_to_n\(30\), [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 377.0081102362204319 Td
(        self.assertRaises\(ValueError, prime_numbers_up_to_n, -1\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 337.323070866141677 Td
(if __name__ == "__main__":) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 317.480551181102328 Td
(    unittest.main\(\)) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0 g
28.3464566929133888 269.2915748031495013 Td
(Test Report:) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 235.2758267716534419 Td
(============================= test session starts =============================) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 215.4333070866141497 Td
(platform win32 -- Python 3.11.9, pytest-8.3.4, pluggy-1.5.0) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 195.5907874015747439 Td
(rootdir: C:\\Users\\Kamal\\AppData\\Local\\Temp\\tmpa8b80_3j) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 175.748267716535338 Td
(plugins: anyio-4.8.0) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 155.9057480314959321 Td
(collected 2 items) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 116.220708661417234 Td
(test_generated.py FF                                                     [100%]) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 76.5356692913385359 Td
(================================== FAILURES ===================================) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 56.69314960629913 Td
(______________________ TestPrimeFunctions.test_is_prime _______________________) Tj
ET
endstream
endobj
9 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 10 0 R
>>
endobj
10 0 obj
<<
/Length 2945
>>
stream
0.5670000000000001 w
0 G
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 813.5435433070865656 Td
(self = <test_generated.TestPrimeFunctions testMethod=test_is_prime>) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 773.8585039370078675 Td
(    def test_is_prime\(self\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 754.0159842519684616 Td
(        self.assertEqual\(is_prime\(2\), True\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 734.1734645669291695 Td
(        self.assertEqual\(is_prime\(3\), True\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 714.3309448818897636 Td
(        self.assertEqual\(is_prime\(4\), False\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 694.4884251968503577 Td
(        self.assertEqual\(is_prime\(29\), True\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 674.6459055118109518 Td
(>       self.assertRaises\(ValueError, is_prime, -1\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 654.8033858267716596 Td
(E       AssertionError: ValueError not raised by is_prime) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 615.1183464566928478 Td
(test_generated.py:32: AssertionError) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 595.2758267716535556 Td
(________________ TestPrimeFunctions.test_prime_numbers_up_to_n ________________) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 555.5907874015747439 Td
(self = <test_generated.TestPrimeFunctions testMethod=test_prime_numbers_up_to_n>) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 515.9057480314959321 Td
(    def test_prime_numbers_up_to_n\(self\):) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 496.0632283464566399 Td
(        self.assertEqual\(prime_numbers_up_to_n\(10\), [2, 3, 5, 7]\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 476.2207086614172908 Td
(        self.assertEqual\(prime_numbers_up_to_n\(30\), [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 456.378188976377885 Td
(>       self.assertRaises\(ValueError, prime_numbers_up_to_n, -1\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 436.5356692913385359 Td
(E       AssertionError: ValueError not raised by prime_numbers_up_to_n) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 396.850629921259781 Td
(test_generated.py:37: AssertionError) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 377.0081102362204319 Td
(=========================== short test summary info ===========================) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 357.1655905511810261 Td
(FAILED test_generated.py::TestPrimeFunctions::test_is_prime - AssertionError:...) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 337.323070866141677 Td
(FAILED test_generated.py::TestPrimeFunctions::test_prime_numbers_up_to_n - As...) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
28.3464566929133888 317.480551181102328 Td
(============================== 2 failed in 0.09s ==============================) Tj
ET
endstream
endobj
1 0 obj
<</Type /Pages
/Kids [3 0 R 5 0 R 7 0 R 9 0 R ]
/Count 4
>>
endobj
11 0 obj
<<
/Type /Font
/BaseFont /Helvetica
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
12 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
13 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
14 0 obj
<<
/Type /Font
/BaseFont /Helvetica-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
15 0 obj
<<
/Type /Font
/BaseFont /Courier
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
16 0 obj
<<
/Type /Font
/BaseFont /Courier-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
17 0 obj
<<
/Type /Font
/BaseFont /Courier-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
18 0 obj
<<
/Type /Font
/BaseFont /Courier-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
19 0 obj
<<
/Type /Font
/BaseFont /Times-Roman
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
20 0 obj
<<
/Type /Font
/BaseFont /Times-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
21 0 obj
<<
/Type /Font
/BaseFont /Times-Italic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
22 0 obj
<<
/Type /Font
/BaseFont /Times-BoldItalic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
23 0 obj
<<
/Type /Font
/BaseFont /ZapfDingbats
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
24 0 obj
<<
/Type /Font
/BaseFont /Symbol
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
2 0 obj
<<
/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font <<
/F1 11 0 R
/F2 12 0 R
/F3 13 0 R
/F4 14 0 R
/F5 15 0 R
/F6 16 0 R
/F7 17 0 R
/F8 18 0 R
/F9 19 0 R
/F10 20 0 R
/F11 21 0 R
/F12 22 0 R
/F13 23 0 R
/F14 24 0 R
>>
/XObject <<
>>
>>
endobj
25 0 obj
<<
/Producer (jsPDF 3.0.0)
/CreationDate (D:20250221020036+05'30')
>>
endobj
26 0 obj
<<
/Type /Catalog
/Pages 1 0 R
/OpenAction [3 0 R /FitH null]
/PageLayout /OneColumn
>>
endobj
xref
0 27
0000000000 65535 f 
0000014300 00000 n 
0000016140 00000 n 
0000000015 00000 n 
0000000152 00000 n 
0000003653 00000 n 
0000003790 00000 n 
0000007175 00000 n 
0000007312 00000 n 
0000011164 00000 n 
0000011302 00000 n 
0000014375 00000 n 
0000014501 00000 n 
0000014632 00000 n 
0000014766 00000 n 
0000014904 00000 n 
0000015028 00000 n 
0000015157 00000 n 
0000015289 00000 n 
0000015425 00000 n 
0000015553 00000 n 
0000015680 00000 n 
0000015809 00000 n 
0000015942 00000 n 
0000016044 00000 n 
0000016393 00000 n 
0000016479 00000 n 
trailer
<<
/Size 27
/Root 26 0 R
/Info 25 0 R
/ID [ <CC77C33E40FD36E95C9918E8E90CBFCB> <CC77C33E40FD36E95C9918E8E90CBFCB> ]
>>
startxref
16583
%%EOF